;----------------------------------------------------------------------------
; Project MD
; Copyright 2012 Javier Degirolmo
;
; This file is part of Project MD.
;
; Project MD is free software: you can redistribute it and/or modify
; it under the terms of the GNU General Public License as published by
; the Free Software Foundation, either version 3 of the License, or
; (at your option) any later version.
;
; Project MD is distributed in the hope that it will be useful,
; but WITHOUT ANY WARRANTY; without even the implied warranty of
; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
; GNU General Public License for more details.
;
; You should have received a copy of the GNU General Public License
; along with Project MD.  If not, see <http://www.gnu.org/licenses/>.
;----------------------------------------------------------------------------

;----------------------------------------------------------------------------

;-----------------------------------;
; RunVerticalPlatform               ;
;                                   ;
; Logic code for vertical platforms ;
;-----------------------------------;

RunVerticalPlatform:

;---------------;
; Move upwards? ;
;---------------;

    move.l  Object_Y(a0), d1
    move.l  d1, d4
    move.l  (RAM_GlobalAnimSpd), d2
    move.l  d2, d3

    move.w  Object_Misc(a0), d0
    bne.s   @NotUpwards

    sub.l   d2, d1
    neg.l   d3

    move.l  d1, d2
    swap    d2
    subq.w  #1, d2
    lsr.w   #5, d2
    move.w  Object_X(a0), d0
    and.w   #$FFE0, d0
    lsr.w   #2, d0
    add.w   d0, d2
    move.l  (RAM_CollAddr), a6
    lea     (a6,d2.w), a6

    move.b  (a6), d0
    beq.s   @Moved
    move.w  #1, Object_Misc(a0)
    bra.s   @Moved
@NotUpwards:

;-----------------;
; Move downwards? ;
;-----------------;

    add.l   d2, d1

    move.l  d1, d2
    swap    d2
    add.w   #33, d2
    lsr.w   #5, d2
    move.w  Object_X(a0), d0
    and.w   #$FFE0, d0
    lsr.w   #2, d0
    add.w   d0, d2
    move.l  (RAM_CollAddr), a6
    lea     (a6,d2.w), a6

    move.b  (a6), d0
    beq.s   @Moved
    move.w  #0, Object_Misc(a0)

;---------------------;
; Update Y coordinate ;
;---------------------;

@Moved:
    move.l  d1, Object_Y(a0)

;-------------------;
; Are we outbounds? ;
;-------------------;

    move.w  Object_X(a0), d0
    sub.w   (RAM_Scroll), d0
    cmp.w   #0-$E0, d0
    blt.s   @Outbounds
    cmp.w   #320+$60, d0
    ble.s   @CheckCol

@Outbounds:
    bra     DeleteObject

;-------------------------------;
; Is the player stepping on us? ;
;-------------------------------;

@CheckCol:
    move.w  Player_Gravity(a3), d0
    blt.s   @End

    move.w  Object_X(a0), d0
    move.w  Player_X(a3), d1
    cmp.w   d0, d1
    blt.s   @End

    add.w   #64, d0
    cmp.w   d0, d1
    bgt.s   @End

    swap    d4
    move.w  d4, d0
    move.w  Player_Y(a3), d1
    subq.w  #1, d0
    cmp.w   d0, d1
    blt.s   @End

    addq.w  #8, d0
    cmp.w   d0, d1
    bgt.s   @End

;---------------------------;
; Make Stephany ride on us! ;
;---------------------------;

    subq.w  #1, d4
    swap    d4
    add.l   d3, d4
    move.l  d4, Player_Y(a3)
    move.w  Player_Status(a3), d0
    bset.l  #PlayerStat_Ride, d0
    move.w  d0, Player_Status(a3)
    move.w  #0, Player_Gravity(a3)

    move.l  #0, Player_RideSpeed(a3)
    move.l  #0, Player_RideGrav(a3)

;-------------------;
; End of subroutine ;
;-------------------;

@End:
    rts

;----------------------------------------------------------------------------

