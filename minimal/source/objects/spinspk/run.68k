;----------------------------------------------------------------------------
; Project MD
; Copyright 2012 Javier Degirolmo
;
; This file is part of Project MD.
;
; Project MD is free software: you can redistribute it and/or modify
; it under the terms of the GNU General Public License as published by
; the Free Software Foundation, either version 3 of the License, or
; (at your option) any later version.
;
; Project MD is distributed in the hope that it will be useful,
; but WITHOUT ANY WARRANTY; without even the implied warranty of
; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
; GNU General Public License for more details.
;
; You should have received a copy of the GNU General Public License
; along with Project MD.  If not, see <http://www.gnu.org/licenses/>.
;----------------------------------------------------------------------------

;----------------------------------------------------------------------------

;-----------------------------------------;
; RunSpinSpike                            ;
;                                         ;
; Game logic code for spinning spikeballs ;
;-----------------------------------------;

RunSpinSpike:

;-----------------;
; Move vertically ;
;-----------------;

    move.w  Object_X(a0), d0
    move.l  Object_Y(a0), d1

    tst.b   Object_Misc(a0)
    bne.s   @MoveUp

    move.l  d1, d2
    swap    d2
    add.w   #32, d2
    lsr.w   #5, d0
    lsr.w   #5, d2
    add.w   d0, d0
    add.w   d0, d0
    add.w   d0, d0
    add.w   d2, d0
    move.l  (RAM_CollAddr), a6
    move.b  (a6,d0.w), d2
    bne.s   @SwitchToUp
    add.l   (RAM_GlobalAnimSpd), d1
    bra.s   @Moved
@SwitchToUp:
    move.b  #1, Object_Misc(a0)
    bra.s   @Moved

@MoveUp:
    tst.l   d1
    ble.s   @SwitchToDown
    move.l  d1, d2
    swap    d2
    subq.w  #1, d2
    lsr.w   #5, d0
    lsr.w   #5, d2
    add.w   d0, d0
    add.w   d0, d0
    add.w   d0, d0
    add.w   d2, d0
    move.l  (RAM_CollAddr), a6
    move.b  (a6,d0.w), d2
    bne.s   @SwitchToDown
    sub.l   (RAM_GlobalAnimSpd), d1
    bra.s   @Moved
@SwitchToDown:
    move.b  #0, Object_Misc(a0)

@Moved:
    move.l  d1, Object_Y(a0)

;-------------------;
; Are we outbounds? ;
;-------------------;

    move.w  Object_X(a0), d0
    sub.w   (RAM_Scroll), d0
    cmp.w   #0-$100, d0
    blt.s   @Outbounds
    cmp.w   #320+$C0, d0
    ble.s   @CheckPlayer

@Outbounds:
    bra     DeleteObject

;-----------------------------------;
; Are we colliding with the player? ;
;-----------------------------------;

@CheckPlayer:
    move.w  Object_X(a0), d0
    move.w  Player_X(a3), d1
    addq.w  #4, d0
    addq.w  #3, d1
    cmp.w   d0, d1
    blt.s   @End

    add.w   #23, d0
    subq.w  #7, d1
    cmp.w   d0, d1
    bgt.s   @End

    move.w  Object_Y(a0), d0
    move.w  Player_Y(a3), d1
    addq.w  #4, d0
    cmp.w   d0, d1
    blt.s   @End

    add.w   #23, d0
    sub.w   #31, d1
    cmp.w   d0, d1
    bgt.s   @End

;------------------;
; Hurt the player! ;
;------------------;

    bsr     HurtPlayer

;-------------------;
; End of subroutine ;
;-------------------;

@End:
    rts

;----------------------------------------------------------------------------
