;----------------------------------------------------------------------------
; Project MD
; Copyright 2012 Javier Degirolmo
;
; This file is part of Project MD.
;
; Project MD is free software: you can redistribute it and/or modify
; it under the terms of the GNU General Public License as published by
; the Free Software Foundation, either version 3 of the License, or
; (at your option) any later version.
;
; Project MD is distributed in the hope that it will be useful,
; but WITHOUT ANY WARRANTY; without even the implied warranty of
; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
; GNU General Public License for more details.
;
; You should have received a copy of the GNU General Public License
; along with Project MD.  If not, see <http://www.gnu.org/licenses/>.
;----------------------------------------------------------------------------

;----------------------------------------------------------------------------

;--------------------------------------;
; DrawLevelColumn                      ;
; Draws a tile column into the tilemap ;
;--------------------------------------;
; INPUT                                ;
;   d0.w ... ID of column to draw      ;
;--------------------------------------;
; BREAKS: all                          ;
;--------------------------------------;

DrawLevelColumn:

;----------------------------------;
; Calculate VRAM address of column ;
;----------------------------------;

    move.w  d0, d1
    andi.l  #$F, d1
    add.w   d1, d1
    add.w   d1, d1
    add.w   d1, d1
    or.w    #$4000, d1
    swap    d1
    move.w  #$0003, d1

;--------------------;
; VDP port addresses ;
;--------------------;

    lea     ($C00004), a0
    lea     ($C00000), a1

;-----------------------;
; Get tile data address ;
;-----------------------;

    move.l  (RAM_TileAddr), a2

;----------------------------;
; Get address of tile column ;
;----------------------------;

    add.w   d0, d0
    add.w   d0, d0
    add.w   d0, d0
    move.l  (RAM_LayoutAddr), a4
    lea     (a4,d0.w), a4
    move.l  a4, a5

;--------------------------------------;
; Proceed to write all tiles           ;
; This is for the first blinking frame ;
;--------------------------------------;

    moveq   #7-1, d3
    move.w  #$40*2, d4
@VLoop1:

;---------------------------------------;
; Get pointer to the data for this tile ;
;---------------------------------------;

    move.l  a2, a3
    moveq   #0, d0
    move.b  (a4)+, d0

    add.w   d0, d0
    add.w   d0, d0
    move.w  (a3,d0.w), d0
    lea     (a3,d0.w), a3

;------------------------------;
; Write tile data into tilemap ;
;------------------------------;

    rept 4
    move.l  d1, (a0)
    move.l  (a3)+, (a1)
    move.l  (a3)+, (a1)
    swap    d1
    add.w   d4, d1
    swap    d1
    endr

;-----------;
; Next tile ;
;-----------;

    dbf     d3, @VLoop1

;---------------------------------------;
; Proceed to write all tiles            ;
; This is for the second blinking frame ;
;---------------------------------------;

    moveq   #7-1, d3
    move.w  #$40*2, d4
@VLoop2:

;---------------------------------------;
; Get pointer to the data for this tile ;
;---------------------------------------;

    move.l  a2, a3
    moveq   #0, d0
    move.b  (a5)+, d0

    add.w   d0, d0
    add.w   d0, d0
    addq.w  #2, d0
    move.w  (a3,d0.w), d0
    lea     (a3,d0.w), a3

;------------------------------;
; Write tile data into tilemap ;
;------------------------------;

    rept 4
    move.l  d1, (a0)
    move.l  (a3)+, (a1)
    move.l  (a3)+, (a1)
    swap    d1
    add.w   d4, d1
    swap    d1
    endr

;-----------;
; Next tile ;
;-----------;

    dbf     d3, @VLoop2

;-------------------;
; End of subroutine ;
;-------------------;

    rts

;----------------------------------------------------------------------------
